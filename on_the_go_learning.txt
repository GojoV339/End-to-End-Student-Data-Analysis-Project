Data Ingestion File 

------------------------------------------------------------------------------------------------------------------------------
@dataclass // decorator
what is the use of thie @dataclass (decorator) ? 


// Without dataclass

import os

class DataIngestionConfig:
    def __init__(self, train_data_path: str = os.path.join('artifacts', 'train.csv')):
        self.train_data_path = train_data_path

    def __repr__(self):   # you have to write this if you want a clean print
        return f"DataIngestionConfig(train_data_path={self.train_data_path!r})"


config = DataIngestionConfig()
print(config)


=> Output of the above code

DataIngestionConfig(train_data_path='artifacts/train.csv')

we wrote __init__ by ourself
we wrote __repr__ by ourself
if we add more variables like test_data_path , raw_data_path , we have to again edit both the methods manually

*********************************************

// With dataclass

from dataclasses import dataclass
import os

@dataclass
class DataIngestionConfig:
    train_data_path: str = os.path.join('artifacts', 'train.csv')


config = DataIngestionConfig()
print(config)


=> Output of the above code 

DataIngestionConfig(train_data_path='artifacts/train.csv')


we didn't wrote any __init__ , __repr__ method , everything is automatically generated by the python 


// Another Extradoinary Example 

@dataclass
class DataIngestionConfig:
    train_data_path: str = "train.csv"
    test_data_path: str = "test.csv"
    raw_data_path: str = "raw.csv"

config = DataIngestionConfig()
print(config)


the output of above code is 

DataIngestionConfig(train_data_path='train.csv', test_data_path='test.csv', raw_data_path='raw.csv')

------------------------------------------------------------------------------------------------------------------------------





